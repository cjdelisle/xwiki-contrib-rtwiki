{{velocity}}

## TODO find out what a merge error would look like
#set ($err = "false" )

#if($request.version)
	#set ($rtVersion = $request.get('version'))
	#set ($rtDocumentName = $request.get('document'))
	#set ($rtLiveContent = $request.get('content'))
	
	#set ($actualDocument=$xwiki.getDocument($rtDocumentName))
	#set ($actualContent = $actualDocument.getContent())
	#set ($originalDocument = $actualDocument.getDocumentRevision($rtVersion))
	#set ($rtRevision = $originalDocument.getContent())
	
	#if($rtRevision == $actualContent)
		{
            "error": ${err},
			"content": $jsontool.serialize($rtLiveContent),
			"merged": false,
            "conflicts": false,
            "errorCount": 0,
            "saveRequired": true
		}
    #elseif($rtLiveContent == $actualContent)
        {
            "error": ${err},
            "content": $jsontool.serialize($rtLiveContent),
            "merged": false,
            "conflicts": false,
            "errorCount": 0,
            "saveRequired": false
        }
	#else
		#set ($placeholder = " ${escapetool.getNewline()} ")
		#set ($splitRevision=$rtRevision.replaceAll("\r","").replaceAll("\n", $placeholder).split(" "))
		#set ($splitLiveContent=$rtLiveContent.replaceAll("\r","").replaceAll("\n", $placeholder).split(" "))
		#set ($splitActualContent=$actualContent.replaceAll("\r","").replaceAll("\n", $placeholder).split(" "))
		
		#set ($OList = [])
		#foreach($o in $splitRevision) #set($discard=$OList.add($o)) #end
		
		## NOTE :: Realtime content must be used as $BList, as the merge algorithm
		## will prefer those changes
		#set ($BList = [])
		#foreach($b in $splitLiveContent) #set($discard=$BList.add($b)) #end
		
		#set ($AList = [])
		#foreach($a in $splitActualContent) #set($discard=$AList.add($a)) #end
		
		#set ($merged=$services.diff.merge( $OList, $AList, $BList, null))
		
		#set ($final = $stringtool.join($merged.getMerged(), " ").replaceAll($placeholder, $escapetool.getNewline()))
		{
		    "error": ${err},
		    "content": $jsontool.serialize($final),
		    "merged": true,
		    "conflicts": $jsontool.serialize($merged.getLog()),
		    "errorCount": $jsontool.serialize($merged.getLog().size),
            "saveRequired": true
		}
	#end
#end
{{/velocity}}
