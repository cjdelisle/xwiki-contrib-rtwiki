{{velocity}}
{{html clean="false"}}
<script>
;(function() {
  // VELOCITY
  var WEBSOCKET_URL = "$services.websocket.getURL('realtime')";
  var USER = "$!xcontext.getUserReference()" || "xwiki:XWiki.XWikiGuest";
  var PATHS = {
    RTWiki_WebHome_chainpad: "$doc.getAttachmentURL('chainpad.js')",
    RTWiki_WebHome_sharejs_textarea: "$doc.getAttachmentURL('sharejs_textarea.js')"
  };
  // END_VELOCITY

  /** Id of the div containing the user list. */
  var USER_LIST_ID = 'realtime-user-list';

  /** Id of the div containing the lag info. */
  var LAG_ELEM_ID = 'realtime-lag';

  for (var path in PATHS) { PATHS[path] = PATHS[path].replace(/\.js$/, ''); }
  require.config({paths:PATHS});

  // remove to debug
  var console = { log:function() {} };

  var checkLag = function (realtime, lagElement) {
      var lag = realtime.getLag();
      var lagSec = lag.lag/1000;
      lagElement.textContent = "Lag: ";
      if (lag.waiting && lagSec > 1) {
          lagElement.textContent += "?? " + Math.floor(lagSec);
      } else {
          lagElement.textContent += lagSec;
      }
  };

  var updateUserList = function (myUserName, listElement, userList)
  {
      var meIdx = userList.indexOf(myUserName);
      if (meIdx === -1) {
          console.log("user list ["+userList+"] does not contain self ["+myUserName+"]...");
          listElement.textContent = "Disconnected";
          return;
      }
      var userMap = { "Myself":1 };
      userList.splice(meIdx, 1);
      for (var i = 0; i < userList.length; i++) {
          var user = userList[i].replace(/-.*/, '');
          if (user === 'xwiki:XWiki.XWikiGuest') {
              if (userMap.Guests) {
                  user = 'Guests';
              } else {
                  user = 'Guest';
              }
          }
          userMap[user] = userMap[user] || 0;
          if (user === 'Guest' && userMap[user] > 0) {
              userMap.Guests = userMap[user];
              delete userMap[user];
              user = 'Guests';
          }
          userMap[user]++;
      }
      var userListOut = [];
      for (var name in userMap) {
          if (userMap[name] > 1) {
              userListOut.push(userMap[name] + " " + name);
          } else {
              userListOut.push(name);
          }
      }
      if (userListOut.length > 1) {
          userListOut[userListOut.length-1] = 'and ' + userListOut[userListOut.length-1];
      }
      listElement.textContent = 'Editing with: ' + userListOut.join(', ');
  };

  var userName = USER + '-' + String(Math.random()).substring(2);

  require([
    'jquery',
    'RTWiki_WebHome_sharejs_textarea',
    'RTWiki_WebHome_chainpad'
  ], function($, TextArea) {
    var ChainPad = window.ChainPad;

    var startWebSocket = function (elem) {
      console.log("Opening websocket");
      var socket = new WebSocket(WEBSOCKET_URL);
      socket.onopen = function(evt) {
        var initState = $(elem).val();
        var realtime = ChainPad.create(userName,
                                       'x',
                                       JSON.stringify(XWiki.currentDocument),
                                       initState);

        var realtimeLag = document.getElementById(LAG_ELEM_ID);
        if (realtimeLag) {
            setInterval(function () {
                checkLag(realtime, realtimeLag);
            }, 3000);
        }

        var realtimeUserList = document.getElementById(USER_LIST_ID);
        if (realtimeUserList) {
            realtime.onUserListChange(function (userList) {
                updateUserList(userName, realtimeUserList, userList);
            });
        }

        socket.onmessage = function (evt) { realtime.message(evt.data); };
        realtime.onMessage(function (message) { socket.send(message); });

        TextArea.attach($(elem)[0], realtime, initState);
        console.log("Bound websocket");
        realtime.start();
        socket.realtime = realtime;
      };
      socket.onclose = function(evt) { console.log("socket closed"); console.log(evt); };
      socket.onerror = function(evt) { console.log("socket error "); console.log(evt); };
      return socket;
    };

    startWebSocket($('#realtime'));

  });
})();
</script>
{{/html}}
{{/velocity}}

{{html clean=false}}
<style>
.realtime-bar {
    width: 100%;
    color: #666;
    font-weight: bold;
    background-color: #f0f0ee;
    border: 0, none;
    border-top: 1px solid #DDD;
    border-bottom: 2px solid #DDD;
    height: 24px;
    float:left;
}
.realtime-bar div {
    padding: 0 10px;
    height: 1.5em;
    background: #f0f0ee;
    line-height: 25px;
    height:24px;
}
#realtime-user-list {
    border-left: 2px solid #DDD;
    float: left;
}
#realtime-debug {
    float: left;
}
#realtime-debug > a {
    display: none;
}
#realtime-debug:hover > a {
    display:inline;
}
#realtime-rightside {
    border-right: 2px solid #DDD;
    float:right;
}
#realtime-lag {
    float: right;
}
</style>

<div class="realtime-bar">
    <div id="realtime-user-list">
        Loading... (Or maybe broken and you should come back later)
    </div>
    <div id="realtime-rightside">
      <div id="realtime-lag"></div>
    </div>
</div>

<textarea id="realtime" cols="0" rows="0" style="width:100%;height:400px">
Go ahead, type something, it's realtime collaboration!
psst: try opening another browser to the same page for maximum wow
</textarea>
{{/html}}
